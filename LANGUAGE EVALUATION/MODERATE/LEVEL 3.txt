import tkinter as tk
import speech_recognition as sr
import pyttsx3
from PIL import Image, ImageTk
import language_tool_python

# Initialize text-to-speech engine
engine = pyttsx3.init()

# Initialize LanguageTool for grammar checking
tool = language_tool_python.LanguageTool('en-US')

# Global variable to track picture index
current_picture = 0

# List of image file paths and keywords for picture relevance
images = [
    {"file": "C:\\Users\\Lenovo\\Downloads\\img1.webp", "keywords": ["turtle", "fish", "lake"]},
    {"file": "C:\\Users\\Lenovo\\Downloads\\img2.webp", "keywords": ["turtle", "ducks", "lake"]},
    {"file": "C:\\Users\\Lenovo\\Downloads\\img3.webp", "keywords": ["turtle", "swimming", "lake"]},
]

# Function to speak a message
def speak(message):
    engine.say(message)
    engine.runAndWait()

# Function to evaluate grammar using LanguageTool
def evaluate_grammar(sentence):
    matches = tool.check(sentence)
    # Filter only critical errors (ignoring minor or stylistic suggestions)
    critical_errors = [match for match in matches if match.ruleIssueType == "grammar"]
    if len(critical_errors) == 0:
        return True
    else:
        return False

# Function to check if the sentence is relevant to the picture
def is_relevant(sentence, keywords):
    return any(keyword.lower() in sentence.lower() for keyword in keywords)

# Function to capture speech and evaluate the sentence
def capture_and_evaluate():
    r = sr.Recognizer()
    
    # Update the status
    result_label.config(text="Listening for your description...")
    speak("Please describe the picture.")
    
    with sr.Microphone() as source:
        audio = r.listen(source)
        try:
            text = r.recognize_google(audio)
            print(f"Recognized: {text}")
            result_label.config(text=f"You said: {text}")
            
            # Evaluate the grammar
            if not evaluate_grammar(text):
                result_label.config(text="Your sentence has grammatical errors.")
                speak("Your sentence has grammatical errors.")
            elif not is_relevant(text, images[current_picture]["keywords"]):
                result_label.config(text="Your description is not relevant to the picture.")
                speak("Your description is not relevant to the picture.")
            else:
                result_label.config(text="Your description is correct!")
                speak("Your description is correct!")
        except sr.UnknownValueError:
            result_label.config(text="Sorry, I could not understand your speech.")
            speak("Sorry, I could not understand your speech.")
        except sr.RequestError as e:
            result_label.config(text=f"Error: {e}")
            speak("Sorry, there was an error with the speech recognition service.")

# Function to display the next picture
def next_picture():
    global current_picture
    current_picture += 1
    if current_picture < len(images):
        display_picture(images[current_picture]["file"])
    else:
        result_label.config(text="You have completed all the pictures.")
        speak("You have completed all the pictures.")
        current_picture = 0  # Reset to first picture

# Function to display the current picture
def display_picture(image_file):
    img = Image.open(image_file)
    img = img.resize((300, 300), Image.Resampling.LANCZOS)
    img = ImageTk.PhotoImage(img)
    image_label.config(image=img)
    image_label.image = img

# GUI setup
root = tk.Tk()
root.title("Storytelling Game")
root.geometry("400x500")

# Instruction label
instruction_label = tk.Label(root, text="Describe the picture and tell a story.", font=("Arial", 14))
instruction_label.pack(pady=20)

# Image label to display the picture
image_label = tk.Label(root)
image_label.pack(pady=10)

# Button to start listening for the description
start_button = tk.Button(root, text="Describe Picture", command=capture_and_evaluate, font=("Arial", 14), bg="blue", fg="white")
start_button.pack(pady=10)

# Button to go to the next picture
next_button = tk.Button(root, text="Next Picture", command=next_picture, font=("Arial", 14), bg="green", fg="white")
next_button.pack(pady=10)

# Label to display the result of the evaluation
result_label = tk.Label(root, text="", font=("Arial", 12))
result_label.pack(pady=10)

# Display the first picture initially
display_picture(images[current_picture]["file"])

# Start the GUI loop
root.mainloop()
